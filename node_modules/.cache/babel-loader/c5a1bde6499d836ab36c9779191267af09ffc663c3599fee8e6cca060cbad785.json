{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nconst QUALIFIER_KEY = 'a';\n/**\n * @description Rotates or flips an image or video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rotating_images|Rotating images}\n * {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rotating_videos|Rotating videos}\n * @extends SDK.Action\n * @memberOf Actions.Rotate\n * @see Visit {@link Actions.Rotate|Rotate} for an example\n */\nclass RotateAction extends Action {\n  constructor(angle) {\n    super();\n    this._actionModel = {};\n    this.addQualifier(new Qualifier(QUALIFIER_KEY, angle));\n    if (angle) {\n      this._actionModel.actionType = 'rotateByAngle';\n      this._actionModel.angle = angle;\n    }\n  }\n  /**\n   * @description Rotates an asset using a defined mode.\n   * @param {Qualifiers.RotationMode | RotationModeType | string} rotationMode\n   * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\n   * possible values\n   * @return {this}\n   */\n  mode(rotationMode) {\n    this._actionModel.actionType = 'rotateByMode';\n    this._actionModel.mode = rotationMode;\n    return this.addValueToQualifier(QUALIFIER_KEY, rotationMode);\n  }\n  /**\n   * @description Rotates an asset by the specified degrees.\n   * @param {number} degrees rotation in degrees e.g 90, 45, 33\n   * @return {this}\n   */\n  angle(degrees) {\n    this._actionModel.actionType = 'rotateByAngle';\n    this._actionModel.angle = degrees;\n    return this.addValueToQualifier(QUALIFIER_KEY, degrees);\n  }\n  static fromJson(actionModel) {\n    const {\n      angle,\n      mode\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = mode ? new this().mode(mode) : new this(angle);\n    return result;\n  }\n}\nexport default RotateAction;","map":{"version":3,"names":["Action","Qualifier","QUALIFIER_KEY","RotateAction","constructor","angle","_actionModel","addQualifier","actionType","mode","rotationMode","addValueToQualifier","degrees","fromJson","actionModel","result"],"sources":["C:/Users/natno/OneDrive/เดสก์ท็อป/School-Project/ecom-react-natnoppol/node_modules/@cloudinary/transformation-builder-sdk/actions/rotate/RotateAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nconst QUALIFIER_KEY = 'a';\n/**\n * @description Rotates or flips an image or video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rotating_images|Rotating images}\n * {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rotating_videos|Rotating videos}\n * @extends SDK.Action\n * @memberOf Actions.Rotate\n * @see Visit {@link Actions.Rotate|Rotate} for an example\n */\nclass RotateAction extends Action {\n    constructor(angle) {\n        super();\n        this._actionModel = {};\n        this.addQualifier(new Qualifier(QUALIFIER_KEY, angle));\n        if (angle) {\n            this._actionModel.actionType = 'rotateByAngle';\n            this._actionModel.angle = angle;\n        }\n    }\n    /**\n     * @description Rotates an asset using a defined mode.\n     * @param {Qualifiers.RotationMode | RotationModeType | string} rotationMode\n     * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\n     * possible values\n     * @return {this}\n     */\n    mode(rotationMode) {\n        this._actionModel.actionType = 'rotateByMode';\n        this._actionModel.mode = rotationMode;\n        return this.addValueToQualifier(QUALIFIER_KEY, rotationMode);\n    }\n    /**\n     * @description Rotates an asset by the specified degrees.\n     * @param {number} degrees rotation in degrees e.g 90, 45, 33\n     * @return {this}\n     */\n    angle(degrees) {\n        this._actionModel.actionType = 'rotateByAngle';\n        this._actionModel.angle = degrees;\n        return this.addValueToQualifier(QUALIFIER_KEY, degrees);\n    }\n    static fromJson(actionModel) {\n        const { angle, mode } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = mode ? new this().mode(mode) : new this(angle);\n        return result;\n    }\n}\nexport default RotateAction;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,SAAS,QAAQ,uCAAuC;AACjE,MAAMC,aAAa,GAAG,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASH,MAAM,CAAC;EAC9BI,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,YAAY,CAAC,IAAIN,SAAS,CAACC,aAAa,EAAEG,KAAK,CAAC,CAAC;IACtD,IAAIA,KAAK,EAAE;MACP,IAAI,CAACC,YAAY,CAACE,UAAU,GAAG,eAAe;MAC9C,IAAI,CAACF,YAAY,CAACD,KAAK,GAAGA,KAAK;IACnC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,IAAIA,CAACC,YAAY,EAAE;IACf,IAAI,CAACJ,YAAY,CAACE,UAAU,GAAG,cAAc;IAC7C,IAAI,CAACF,YAAY,CAACG,IAAI,GAAGC,YAAY;IACrC,OAAO,IAAI,CAACC,mBAAmB,CAACT,aAAa,EAAEQ,YAAY,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;EACIL,KAAKA,CAACO,OAAO,EAAE;IACX,IAAI,CAACN,YAAY,CAACE,UAAU,GAAG,eAAe;IAC9C,IAAI,CAACF,YAAY,CAACD,KAAK,GAAGO,OAAO;IACjC,OAAO,IAAI,CAACD,mBAAmB,CAACT,aAAa,EAAEU,OAAO,CAAC;EAC3D;EACA,OAAOC,QAAQA,CAACC,WAAW,EAAE;IACzB,MAAM;MAAET,KAAK;MAAEI;IAAK,CAAC,GAAGK,WAAW;IACnC;IACA;IACA,MAAMC,MAAM,GAAGN,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAACA,IAAI,CAACA,IAAI,CAAC,GAAG,IAAI,IAAI,CAACJ,KAAK,CAAC;IAC7D,OAAOU,MAAM;EACjB;AACJ;AACA,eAAeZ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}