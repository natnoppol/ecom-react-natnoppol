{"ast":null,"code":"import { stringPad } from \"./stringPad.js\";\n/**\n * @private\n * @description Pads each segment with '0' so they have length of 2\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} in the form of xx.yy.zz (\n */\nexport function padVersion(semVer) {\n  if (semVer.split('.').length < 2) {\n    throw new Error('invalid semVer, must have at least two segments');\n  }\n  // Split by '.', reverse, create new array with padded values and concat it together\n  return semVer.split('.').map(segment => {\n    // try to cast to number\n    const asNumber = +segment;\n    if (isNaN(asNumber) || asNumber < 0) {\n      throw 'Invalid version number provided';\n    }\n    return stringPad(segment, 2, '0');\n  }).join('.');\n}","map":{"version":3,"names":["stringPad","padVersion","semVer","split","length","Error","map","segment","asNumber","isNaN","join"],"sources":["C:/Users/natno/OneDrive/เดสก์ท็อป/School-Project/ecom-react-natnoppol/node_modules/@cloudinary/url-gen/sdkAnalytics/padVersion.js"],"sourcesContent":["import { stringPad } from \"./stringPad.js\";\n/**\n * @private\n * @description Pads each segment with '0' so they have length of 2\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} in the form of xx.yy.zz (\n */\nexport function padVersion(semVer) {\n    if (semVer.split('.').length < 2) {\n        throw new Error('invalid semVer, must have at least two segments');\n    }\n    // Split by '.', reverse, create new array with padded values and concat it together\n    return semVer.split('.').map((segment) => {\n        // try to cast to number\n        const asNumber = +segment;\n        if (isNaN(asNumber) || asNumber < 0) {\n            throw 'Invalid version number provided';\n        }\n        return stringPad(segment, 2, '0');\n    }).join('.');\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,MAAM,EAAE;EAC/B,IAAIA,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;EACtE;EACA;EACA,OAAOH,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAACG,GAAG,CAAEC,OAAO,IAAK;IACtC;IACA,MAAMC,QAAQ,GAAG,CAACD,OAAO;IACzB,IAAIE,KAAK,CAACD,QAAQ,CAAC,IAAIA,QAAQ,GAAG,CAAC,EAAE;MACjC,MAAM,iCAAiC;IAC3C;IACA,OAAOR,SAAS,CAACO,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC;EACrC,CAAC,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}